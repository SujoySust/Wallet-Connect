# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ApplicationSettingsInput {
  minting_interval_duration_in_min: String
  per_day_minting_limit: String
  settings_buy_sell_fee_percentage: String
  settings_max_interval_for_buy_sell_offer_in_min: String
  settings_min_interval_for_buy_sell_offer_in_min: String
}

type BlockchainModel {
  chain_id: Int
  currency_symbol: String!
  description: String
  exchange_contract: String
  explorer_url: String
  id: Int!
  logo: String
  network_name: String!
  nft_contract: String
  payment_tokens: [PaymentTokenModel!]
  provider: Int!
  public_rpc_url: String
  slug: String!
  status: Int
}

type BlockchainModelEdge {
  cursor: String!
  node: BlockchainModel!
}

type BlockchainStaffConnection {
  edges: [BlockchainStaffModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type BlockchainStaffModel {
  api_key: String
  chain_id: Int
  currency_symbol: String!
  description: String
  exchange_contract: String
  explorer_url: String
  id: Int!
  logo: String
  network_name: String!
  nft_contract: String
  payment_tokens: [PaymentTokenModel!]
  provider: Int!
  public_rpc_url: String
  rpc_url: String
  slug: String!
  status: Int
  wss_url: String
}

type BlockchainStaffModelEdge {
  cursor: String!
  node: BlockchainStaffModel!
}

input CreateBlockChainDto {
  api_key: String
  currency_symbol: String!
  description: String
  exchange_contract: String
  explorer_url: String
  logo: Upload
  network_name: String!
  nft_contract: String
  provider: Int!
  public_rpc_url: String
  rpc_url: String
  slug: String!
  status: Int
  wss_url: String
}

input CreatePaymentTokenDto {
  blockchain_id: Int!
  contract_address: String!
  is_default: Int
  is_wrapable: Int
  logo: Upload
  min_amount_to_execute_auction: Float!
  name: String!
  status: Int
  sync_rate_status: Int
  token_symbol: String!
  total_decimal: Int!
  type: Int!
  usd_rate: Float
}

"""Date custom scalar type. Basically string"""
scalar Date

"""Decimal custom scalar type. Basically string or number"""
scalar Decimal

type FileObject {
  name: String!
  type: String!
  url: String!
  variants: [FileVariant!]
}

type FileVariant {
  type: String!
  url: String!
}

input HomepageSettingsInput {
  asset_description: String
  asset_title: String
  banner_description: String
  banner_image: Upload
  banner_title: String
  category_description: String
  category_title: String
  featured_collection_description: String
  featured_collection_title: String
  instruction_add_nfts: String
  instruction_create_collection: String
  instruction_description: String
  instruction_image: Upload
  instruction_list_for_sale: String
  instruction_setup_wallet: String
  instruction_title: String
  resource_description: String
  resource_description_1: String
  resource_description_2: String
  resource_description_3: String
  resource_image_1: Upload
  resource_image_2: Upload
  resource_image_3: Upload
  resource_link_1: String
  resource_link_2: String
  resource_link_3: String
  resource_title: String
  resource_title_1: String
  resource_title_2: String
  resource_title_3: String
  selloffer_description: String
  selloffer_title: String
  top_collection_description: String
  top_collection_title: String
  trending_collection_description: String
  trending_collection_title: String
  video_section_description: String
  video_section_title: String
  video_url: String
}

type Mutation {
  StaffLogin(data: StaffLoginInput!): Token!
  adminFileUpload(file: Upload!): FileObject!
  applicationSettingsSave(data: ApplicationSettingsInput!): ResponseModel!
  changePassword(data: ResetPasswordInput!): ResponseMessageWithStatusModel!
  changeStaffPassword(data: ResetPasswordInput!): ResponseModel!
  createBlockchain(data: CreateBlockChainDto!): ResponseModel!
  createPaymentToken(data: CreatePaymentTokenDto!): ResponseModel!
  createRole(data: roleInput!): ResponseModel!
  createStaff(data: StaffCreateInput!): ResponseModel!
  deleteBlockchain(id: Int!): ResponseModel!
  deletePaymentToken(id: Int!): ResponseModel!
  deleteRole(id: Int!): ResponseModel!
  deleteStaff(id: Int!): ResponseModel!
  generalSettingsSave(data: generalSettingsInput!): ResponseModel!
  generateLoginMessage(wallet_address: String!): WalletLoginMessage!
  homepageSettingsSave(data: HomepageSettingsInput!): ResponseModel!
  logoSettingsSave(data: logoSettingsInput!): ResponseModel!
  mailSettingsSave(data: mailSettingsInput!): ResponseModel!
  refreshToken(token: String!): Token!
  resendVerifcationEmail: ResponseModel!
  sendForgetPasswordMail(email: String!): ResponseMessageWithStatusModel!
  sendStaffForgetPasswordMail(email: String!): ResponseModel!
  socialSettingsSave(data: socialSettingsInput!): ResponseModel!
  syncUsdRates: ResponseModel!
  updateBlockchain(data: UpdateBlockChainDto!, id: Int!): ResponseModel!
  updateBlockchainStatus(id: Int!, status: Int!): ResponseModel!
  updatePaymentToken(data: UpdatePaymentTokenDto!, id: Int!): ResponseModel!
  updatePaymentTokenStatus(id: Int!, status: Int!): ResponseModel!
  updateProfile(data: UpdateProfileInput!): ResponseModel!
  updateRole(data: roleInput!, id: Int!): ResponseModel!
  updateStaff(data: StaffUpdateInput!, id: Int!): ResponseModel!
  updateStaffPassword(data: UpdatePasswordInput!): ResponseModel!
  updateStaffProfile(data: StaffUpdateInput!): ResponseModel!
  uploadFile(file: Upload!): FileObject!
  usefulLinkSettingsSave(data: UsefulLinkSettingsInput!): ResponseModel!
  userVerifyMail(verificationCode: String!): ResponseModel!
  walletLogin(data: WalletLoginInput!): Token!
}

type NativeNwrapTokenModel {
  native_token: PaymentTokenModel
  wrap_token: PaymentTokenModel
}

input Order {
  direction: String!
  field: String!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PaymentTokenConnection {
  edges: [PaymentTokenModelEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

type PaymentTokenModel {
  blockchain: BlockchainModel
  blockchain_id: Int!
  contract_address: String
  id: Int!
  is_default: Int!
  is_wrapable: Int!
  logo: String
  min_amount_to_execute_auction: Decimal!
  name: String!
  status: Int
  sync_rate_status: Int!
  token_symbol: String
  total_decimal: Int!
  type: Int!
  usd_rate: Decimal!
}

type PaymentTokenModelEdge {
  cursor: String!
  node: PaymentTokenModel!
}

input PaymentTokenOrder {
  direction: OrderDirection!
  field: PaymentTokenOrderField!
}

"""Properties by which payment token connections can be ordered."""
enum PaymentTokenOrderField {
  id
  name
}

type Query {
  adminFileList: [FileObject!]!
  checkUniqueUser(email: String, username: String, wallet_address: String!): ResponseModel!
  getAccount(address_or_username: String!): User!
  getAccountByAddress(wallet_address: String!): User!
  getBlockchainById(id: Int!): BlockchainStaffModel!
  getBlockchainDetails(chain_id: Int, id: Int): BlockchainModel
  getBlockchainLists(status: Int): [BlockchainModel!]!
  getItemsTokens(item_id: Int!): [PaymentTokenModel!]!
  getNativeNwrapToken(blockchain_id: Int, chain_id: Int): NativeNwrapTokenModel!
  getPaymentTokenById(id: Int!): PaymentTokenModel!
  getRole(id: Int!): Role!
  getRoles(orderBy: RoleOrder, query: String): [Role!]!
  getSettingsData(optionGroup: [String!]): [Setting!]!
  getStaff(id: Int!): Staff!
  getStaffBlockchainListPaginate(after: String, before: String, first: Int, last: Int, orderBy: Order, query: String, skip: Int, status: Int): BlockchainStaffConnection!
  getStaffLists(after: String, before: String, first: Int, last: Int, orderBy: StaffOrder, paginateNumber: Int, query: String, skip: Int): StaffConnection!
  getStaffPaymentTokenListPaginate(after: String, before: String, blockchain_id: Int, chain_id: Int, collection_id: Int, first: Int, last: Int, orderBy: Order, query: String, skip: Int, status: Int): PaymentTokenConnection!
  getTokenLists(blockchain_id: Int, chain_id: Int): [PaymentTokenModel!]!
  getTokenListsPaginate(after: String, before: String, blockchain_id: Int, chain_id: Int, collection_id: Int, first: Int, last: Int, orderBy: PaymentTokenOrder, query: String, skip: Int, status: Int): PaymentTokenConnection!
  getUserByToken: User!
  listFile: [FileObject!]!
  me: User!
  staff: Staff!
}

input ResetPasswordInput {
  code: String!
  email: String!
  password: String!
  passwordConfirm: String!
}

type ResponseMessageWithStatusModel {
  """message"""
  message: String!

  """success"""
  success: Boolean!
}

type ResponseModel {
  """custom code"""
  code: Int!

  """message"""
  message: String!

  """success"""
  success: Boolean!
}

type Role {
  """Identifies the date and time when the object was created."""
  created_at: Date!
  id: Int!
  name: String!
  permissions: String

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
}

input RoleOrder {
  direction: String!
  field: String!
}

type Setting {
  id: Int!
  option_group: String
  option_key: String!
  option_value: String
  value_type: Int
}

type Staff {
  avatar: String

  """Identifies the date and time when the object was created."""
  created_at: Date!
  description: String
  email: String!
  emailVerifiedAt: Date
  id: Int!
  isEmailVerified: Boolean!
  name: String!
  phone: String
  resetCode: String
  role: Role
  roleId: Int
  status: Int!

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
  username: String!
}

type StaffConnection {
  edges: [StaffEdge!]
  pageInfo: PageInfo!
  totalCount: Int
}

input StaffCreateInput {
  avatar: String
  description: String
  email: String!
  name: String!
  password: String!
  phone: String
  roleId: Int
  username: String!
}

type StaffEdge {
  cursor: String!
  node: Staff!
}

input StaffLoginInput {
  password: String!
  username: String!
}

input StaffOrder {
  direction: String!
  field: String!
}

input StaffUpdateInput {
  avatarFile: Upload
  description: String

  """Send email field only if it is admin"""
  email: String
  name: String
  password: String
  phone: String
  roleId: Int
  username: String
}

type Token {
  """JWT access token"""
  accessToken: String!

  """JWT expiration time"""
  expireAt: Date!

  """JWT refresh token"""
  refreshToken: String!
}

input UpdateBlockChainDto {
  api_key: String
  currency_symbol: String!
  description: String
  exchange_contract: String
  explorer_url: String
  logo: Upload
  network_name: String!
  nft_contract: String
  provider: Int!
  public_rpc_url: String
  rpc_url: String
  slug: String!
  status: Int
  wss_url: String
}

input UpdatePasswordInput {
  oldPassword: String!
  password: String!
  passwordConfirm: String!
}

input UpdatePaymentTokenDto {
  blockchain_id: Int!
  contract_address: String!
  is_default: Int
  is_wrapable: Int
  logo: Upload
  min_amount_to_execute_auction: Float!
  name: String!
  status: Int
  sync_rate_status: Int
  token_symbol: String!
  total_decimal: Int!
  type: Int!
  usd_rate: Float
}

input UpdateProfileInput {
  banner_img_file: Upload
  bio: String
  email: String
  instagram_link: String
  name: String
  phone: String
  profile_img_file: Upload
  username: String!
  website_link: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UsefulLinkSettingsInput {
  footer_useful_link_title_1: String
  footer_useful_link_title_2: String
  footer_useful_link_title_3: String
  footer_useful_link_title_4: String
  footer_useful_link_title_5: String
  footer_useful_link_url_1: String
  footer_useful_link_url_2: String
  footer_useful_link_url_3: String
  footer_useful_link_url_4: String
  footer_useful_link_url_5: String
}

type User {
  banner_img: String
  bio: String

  """Identifies the date and time when the object was created."""
  created_at: Date!
  email: String
  email_verified_at: Date
  id: Int!
  is_email_verified: Int
  name: String
  phone: String
  profile_img: String
  reset_code: String
  status: Int

  """Identifies the date and time when the object was last updated."""
  updated_at: Date!
  username: String
  wallet_address: String!
}

input WalletLoginInput {
  address: String!
  nonce: String!
  signature: String!
}

type WalletLoginMessage {
  login_message: String
  nonce: String!
}

input generalSettingsInput {
  address: String
  admin_commission: String
  application_title: String
  contract_email: String
  contract_phone: String
  copy_right_text: String
  wallet_address: String
}

input logoSettingsInput {
  app_logo_large: Upload
  app_logo_small: Upload
  favicon_logo: Upload
}

input mailSettingsInput {
  mail_driver: String
  mail_encryption: String
  mail_from_address: String
  mail_from_name: String
  mail_host: String
  mail_password: String
  mail_port: String
  mail_username: String
}

input roleInput {
  name: String!
  permissions: String
}

input socialSettingsInput {
  discord_link: String
  facebook_link: String
  instagram_link: String
  linkedin_link: String
  twitter_link: String
  whatsapp_link: String
}
