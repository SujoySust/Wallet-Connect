// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  //previewFeatures = ["selectRelationCount"]
}

//generator nestgraphql {
//    provider = "node node_modules/prisma-nestjs-graphql"
//    output = "./@generated/prisma-nestjs-graphql"
//    fields_Validator_from = "class-validator"
//    fields_Validator_input = true
//}


model User {
  id                Int       @id @default(autoincrement())
  wallet_address    String    @unique @db.VarChar(255)
  username          String?   @unique @db.VarChar(255)
  name              String?   @db.VarChar(255)
  profile_img       String?   @db.VarChar(500)
  banner_img        String?   @db.VarChar(500)
  email             String?   @unique @db.VarChar(255)
  reset_code        String?   @db.VarChar(255)
  is_email_verified Int?      @default(0) @db.SmallInt
  email_verified_at DateTime?
  phone             String?   @unique @db.VarChar(255)
  bio               String?
  status            Int       @default(1) @db.SmallInt
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  login_nonces           WalletLoginNonce[]

  @@map("users")
}

model WalletLoginNonce {
  id         Int      @id @default(autoincrement())
  user_id    Int
  nonce      String   @db.VarChar(10)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
  @@map("wallet_login_nonces")
}

model Blockchain {
  id                Int      @id @default(autoincrement())
  network_name      String   @unique @db.VarChar(255)
  description       String?  @db.Text
  slug              String   @unique @db.VarChar(255)
  rpc_url           String?  @db.VarChar(255)
  public_rpc_url    String?  @db.VarChar(255)
  wss_url           String?  @db.VarChar(255)
  api_key           String?  @db.VarChar(255)
  provider          Int      @default(1) @db.SmallInt
  explorer_url      String?  @db.VarChar(255)
  chain_id          Int?
  currency_symbol   String   @db.VarChar(255)
  nft_contract      String?  @db.VarChar(255)
  exchange_contract String?  @db.VarChar(255)
  logo              String?  @db.VarChar(255)
  created_at        DateTime? @default(now())
  updated_at        DateTime? @updatedAt

  payment_tokens PaymentToken[]
  status         Int            @default(1) @db.SmallInt

  @@map("blockchains")
}

model PaymentToken {
  id                            Int      @id @default(autoincrement())
  blockchain_id                 Int
  name                          String   @db.VarChar(255)
  token_symbol                  String?  @db.VarChar(255)
  total_decimal                 Int      @default(18) @db.SmallInt
  min_amount_to_execute_auction Decimal  @default(0) @db.Decimal(65, 30)
  type                          Int      @db.SmallInt
  contract_address              String?  @db.VarChar(255)
  logo                          String?  @db.VarChar(255)
  usd_rate                      Decimal  @default(0) @db.Decimal(65, 30)
  sync_rate_status              Int      @default(1) @db.SmallInt
  is_default                    Int      @default(0) @db.SmallInt
  is_wrapable                   Int      @default(0) @db.SmallInt
  status                        Int      @default(1) @db.SmallInt
  created_at                    DateTime? @default(now())
  updated_at                    DateTime? @updatedAt

  blockchain             Blockchain            @relation(fields: [blockchain_id], references: [id])

  @@unique([blockchain_id, contract_address])
  @@map("payment_tokens")
}

model Staff {
  id              Int       @id @default(autoincrement())
  username        String    @unique @db.VarChar(255)
  name            String    @db.VarChar(255)
  avatar          String?   @db.VarChar(255)
  description     String?
  email           String    @unique @db.VarChar(255)
  phone           String?   @unique @db.VarChar(255)
  emailVerifiedAt DateTime?
  isEmailVerified Boolean   @default(false)
  resetCode       String?   @db.VarChar(255)
  role            Role?     @relation(fields: [roleId], references: [id])
  password        String    @db.VarChar(255)
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  roleId          Int?
  status          Int?      @default(1) @db.SmallInt

  @@map("staffs")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  permissions String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  Staff Staff[]
  @@map("roles")
}

model Setting {
  id           Int     @id @default(autoincrement())
  option_group String? @db.VarChar(255)
  option_key   String  @unique @db.VarChar(255)
  option_value String? @db.Text
  value_type   Int     @default(1) @db.SmallInt

  @@map("settings")
}

model TxNonce {
  id             Int      @id @default(autoincrement()) @db.SmallInt
  chain_id       Int
  wallet_address String   @db.VarChar(255)
  nonce          String   @default("0") @db.VarChar(255)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  @@map("tx_nonces")
}
